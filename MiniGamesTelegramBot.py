import os
import asyncio
import sqlite3
import logging
import random
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found!")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('games.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER,
            chat_id INTEGER,
            username TEXT,
            wins INTEGER DEFAULT 0,
            losses INTEGER DEFAULT 0,
            points INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, chat_id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS game_stats (
            user_id INTEGER,
            chat_id INTEGER,
            game_type TEXT,
            wins INTEGER DEFAULT 0,
            losses INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, chat_id, game_type)
        )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
class GameManager:
    def __init__(self):
        self.active_games = {}
    
    def create_game(self, game_type, chat_id, player1_id, player2_id, player1_name, player2_name):
        game_id = f"{game_type}_{chat_id}_{player1_id}_{player2_id}_{int(time.time())}"
        
        if game_type == "russian_roulette":
            self.active_games[game_id] = {
                'type': game_type,
                'chat_id': chat_id,
                'players': {
                    player1_id: {'name': player1_name, 'alive': True, 'turn': True},
                    player2_id: {'name': player2_name, 'alive': True, 'turn': False}
                },
                'revolver': [False] * 6,
                'current_chamber': 0,
                'created_at': datetime.now()
            }
            # –ó–∞—Ä—è–∂–∞–µ–º 1 –ø–∞—Ç—Ä–æ–Ω –≤ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞–º–æ—Ä—É
            bullet_chamber = random.randint(0, 5)
            self.active_games[game_id]['revolver'][bullet_chamber] = True
            
        elif game_type == "dice_battle":
            self.active_games[game_id] = {
                'type': game_type,
                'chat_id': chat_id,
                'players': {
                    player1_id: {'name': player1_name, 'score': 0, 'rolls_left': 3},
                    player2_id: {'name': player2_name, 'score': 0, 'rolls_left': 3}
                },
                'current_player': player1_id,
                'created_at': datetime.now()
            }
            
        elif game_type == "number_guess":
            target_number = random.randint(1, 100)
            self.active_games[game_id] = {
                'type': game_type,
                'chat_id': chat_id,
                'players': {
                    player1_id: {'name': player1_name, 'attempts': 0},
                    player2_id: {'name': player2_name, 'attempts': 0}
                },
                'target_number': target_number,
                'current_player': player1_id,
                'created_at': datetime.now()
            }
            
        elif game_type == "tic_tac_toe":
            self.active_games[game_id] = {
                'type': game_type,
                'chat_id': chat_id,
                'players': {
                    player1_id: {'name': player1_name, 'symbol': '‚ùå'},
                    player2_id: {'name': player2_name, 'symbol': '‚≠ï'}
                },
                'board': ['‚¨ú'] * 9,
                'current_player': player1_id,
                'created_at': datetime.now()
            }
            
        elif game_type == "quick_math":
            num1, num2 = random.randint(1, 20), random.randint(1, 20)
            operations = ['+', '-', '*']
            operation = random.choice(operations)
            
            if operation == '+':
                answer = num1 + num2
            elif operation == '-':
                answer = num1 - num2
            else:
                answer = num1 * num2
                
            self.active_games[game_id] = {
                'type': game_type,
                'chat_id': chat_id,
                'players': {
                    player1_id: {'name': player1_name, 'score': 0},
                    player2_id: {'name': player2_name, 'score': 0}
                },
                'problem': f"{num1} {operation} {num2}",
                'answer': answer,
                'current_player': player1_id,
                'created_at': datetime.now()
            }
            
        elif game_type == "coin_flip":
            self.active_games[game_id] = {
                'type': game_type,
                'chat_id': chat_id,
                'players': {
                    player1_id: {'name': player1_name, 'choice': None},
                    player2_id: {'name': player2_name, 'choice': None}
                },
                'result': None,
                'created_at': datetime.now()
            }
        
        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        asyncio.create_task(self.remove_game_after_timeout(game_id, 600))
        return game_id
    
    def get_game(self, game_id):
        return self.active_games.get(game_id)
    
    def remove_game(self, game_id):
        if game_id in self.active_games:
            del self.active_games[game_id]
    
    async def remove_game_after_timeout(self, game_id, timeout):
        await asyncio.sleep(timeout)
        self.remove_game(game_id)

game_manager = GameManager()

# –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserManager:
    def __init__(self):
        self.conn = sqlite3.connect('games.db', check_same_thread=False)
    
    def get_or_create_user(self, user_id, chat_id, username):
        cursor = self.conn.cursor()
        cursor.execute(
            'SELECT * FROM users WHERE user_id = ? AND chat_id = ?',
            (user_id, chat_id)
        )
        user = cursor.fetchone()
        
        if not user:
            cursor.execute(
                'INSERT INTO users (user_id, chat_id, username) VALUES (?, ?, ?)',
                (user_id, chat_id, username)
            )
            self.conn.commit()
        
        return user
    
    def update_stats(self, user_id, chat_id, game_type, won=True):
        cursor = self.conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if won:
            cursor.execute(
                'UPDATE users SET wins = wins + 1, points = points + 1 WHERE user_id = ? AND chat_id = ?',
                (user_id, chat_id)
            )
        else:
            cursor.execute(
                'UPDATE users SET losses = losses + 1, points = points - 1 WHERE user_id = ? AND chat_id = ?',
                (user_id, chat_id)
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
        if won:
            cursor.execute(
                '''INSERT OR REPLACE INTO game_stats 
                (user_id, chat_id, game_type, wins, losses) 
                VALUES (?, ?, ?, COALESCE((SELECT wins FROM game_stats WHERE user_id = ? AND chat_id = ? AND game_type = ?), 0) + 1,
                COALESCE((SELECT losses FROM game_stats WHERE user_id = ? AND chat_id = ? AND game_type = ?), 0))''',
                (user_id, chat_id, game_type, user_id, chat_id, game_type, user_id, chat_id, game_type)
            )
        else:
            cursor.execute(
                '''INSERT OR REPLACE INTO game_stats 
                (user_id, chat_id, game_type, wins, losses) 
                VALUES (?, ?, ?, COALESCE((SELECT wins FROM game_stats WHERE user_id = ? AND chat_id = ? AND game_type = ?), 0),
                COALESCE((SELECT losses FROM game_stats WHERE user_id = ? AND chat_id = ? AND game_type = ?), 0) + 1)''',
                (user_id, chat_id, game_type, user_id, chat_id, game_type, user_id, chat_id, game_type)
            )
        
        self.conn.commit()
    
    def get_user_stats(self, user_id, chat_id):
        cursor = self.conn.cursor()
        cursor.execute(
            'SELECT username, wins, losses, points FROM users WHERE user_id = ? AND chat_id = ?',
            (user_id, chat_id)
        )
        return cursor.fetchone()
    
    def get_game_stats(self, user_id, chat_id, game_type):
        cursor = self.conn.cursor()
        cursor.execute(
            'SELECT wins, losses FROM game_stats WHERE user_id = ? AND chat_id = ? AND game_type = ?',
            (user_id, chat_id, game_type)
        )
        return cursor.fetchone()

user_manager = UserManager()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="select_game")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
         InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
        [InlineKeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä", callback_data="game_rules")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_games_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞", callback_data="game_russian_roulette"),
         InlineKeyboardButton(text="üé≤ –ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤", callback_data="game_dice_battle")],
        [InlineKeyboardButton(text="üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_number_guess"),
         InInlineKeyboardButton(text="‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data="game_tic_tac_toe")],
        [InlineKeyboardButton(text="üßÆ –ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="game_quick_math"),
         InlineKeyboardButton(text="ü™ô –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã", callback_data="game_coin_flip")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_play_again_keyboard(game_type):
    keyboard = [
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"game_{game_type}"),
         InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_manager.get_or_create_user(message.from_user.id, message.chat.id, 
                                  message.from_user.username or message.from_user.first_name)
    
    text = (
        "üéÆ **GameBot - –ú–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è –¥–≤–æ–∏—Ö!**\n\n"
        "üí´ *6 —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä:*\n"
        "‚Ä¢ üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞ (—Ä–∞–Ω–¥–æ–º)\n"
        "‚Ä¢ üé≤ –ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤ (—Ä–∞–Ω–¥–æ–º)\n" 
        "‚Ä¢ üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ (–Ω–∞–≤—ã–∫)\n"
        "‚Ä¢ ‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è)\n"
        "‚Ä¢ üßÆ –ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (—Ä–µ–∞–∫—Ü–∏—è)\n"
        "‚Ä¢ ü™ô –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã (—Ä–∞–Ω–¥–æ–º)\n\n"
        "üéØ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**\n"
        "1. –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É\n"
        "2. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n"
        "3. –ò–ª–∏ —É–ø–æ–º—è–Ω–∏ @username\n\n"
        "–ù–∞—á–Ω–∏ –∏–≥—Ä—É –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ! üëá"
    )
    
    await message.answer(text, reply_markup=get_main_keyboard(), parse_mode='Markdown')

@dp.message(Command("games"))
async def games_command(message: types.Message):
    await message.answer("üéÆ **–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:**", reply_markup=get_games_keyboard())

@dp.message(Command("play"))
async def play_command(message: types.Message):
    parts = message.text.split()
    if len(parts) > 1:
        game_type = parts[1]
        if game_type in ["russian_roulette", "dice_battle", "number_guess", "tic_tac_toe", "quick_math", "coin_flip"]:
            if message.reply_to_message:
                target_user = message.reply_to_message.from_user
                await start_specific_game(message, message.from_user, target_user, game_type)
                return
    
    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/play —Ç–∏–ø_–∏–≥—Ä—ã`", parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("üéÆ **GameBot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "select_game")
async def select_game(callback: types.CallbackQuery):
    await callback.message.edit_text("üéÆ **–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:**", reply_markup=get_games_keyboard())

@dp.callback_query(F.data.startswith("game_"))
async def game_selected(callback: types.CallbackQuery):
    game_type = callback.data.replace("game_", "")
    
    if game_type in ["russian_roulette", "dice_battle", "number_guess", "tic_tac_toe", "quick_math", "coin_flip"]:
        await callback.message.edit_text(
            f"üéÆ **{get_game_name(game_type)}**\n\n"
            f"üí° {get_game_description(game_type)}\n\n"
            f"**–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:**\n"
            f"–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏ @username",
            reply_markup=get_main_keyboard()
        )
    else:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@dp.message(F.text.contains("@"))
async def handle_mention(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–∞ –∏–≥—Ä—É
    if "–∏–≥—Ä–∞" in message.text.lower() or "play" in message.text.lower():
        mentioned_users = [entity for entity in message.entities if entity.type == "mention"]
        if mentioned_users:
            await message.answer("üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –¥–ª—è –≤—ã–∑–æ–≤–∞:", reply_markup=get_games_keyboard())

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
async def start_specific_game(message: types.Message, initiator: types.User, target: types.User, game_type: str):
    if initiator.id == target.id:
        await message.reply("‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    
    if target.is_bot:
        await message.reply("‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º!")
        return
    
    initiator_name = initiator.username or initiator.first_name
    target_name = target.username or target.first_name
    
    game_id = game_manager.create_game(game_type, message.chat.id, initiator.id, target.id, initiator_name, target_name)
    user_manager.get_or_create_user(initiator.id, message.chat.id, initiator_name)
    user_manager.get_or_create_user(target.id, message.chat.id, target_name)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É
    if game_type == "russian_roulette":
        await start_russian_roulette(message, game_id)
    elif game_type == "dice_battle":
        await start_dice_battle(message, game_id)
    elif game_type == "number_guess":
        await start_number_guess(message, game_id)
    elif game_type == "tic_tac_toe":
        await start_tic_tac_toe(message, game_id)
    elif game_type == "quick_math":
        await start_quick_math(message, game_id)
    elif game_type == "coin_flip":
        await start_coin_flip(message, game_id)

# –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
async def start_russian_roulette(message: types.Message, game_id: str):
    game = game_manager.get_game(game_id)
    if not game:
        return
    
    player1_id, player2_id = list(game['players'].keys())
    player1_name = game['players'][player1_id]['name']
    player2_name = game['players'][player2_id]['name']
    
    text = (
        f"üî´ **–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞**\n\n"
        f"üéØ –ò–≥—Ä–æ–∫–∏:\n"
        f"‚Ä¢ {player1_name}\n"
        f"‚Ä¢ {player2_name}\n\n"
        f"üíÄ –í —Ä–µ–≤–æ–ª—å–≤–µ—Ä–µ 1 –ø–∞—Ç—Ä–æ–Ω –∏–∑ 6 –∫–∞–º–æ—Ä\n"
        f"üé≤ –•–æ–¥: {player1_name}\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å..."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí• –í–´–°–¢–†–ï–õ–ò–¢–¨!", callback_data=f"rr_shoot_{game_id}")]
    ])
    
    await message.reply(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("rr_shoot_"))
async def rr_shoot(callback: types.CallbackQuery):
    game_id = callback.data.replace("rr_shoot_", "")
    game = game_manager.get_game(game_id)
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    user_id = callback.from_user.id
    if user_id not in game['players']:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥—Ä—ã!", show_alert=True)
        return
    
    if not game['players'][user_id]['turn']:
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞
    current_chamber = game['current_chamber']
    is_bullet = game['revolver'][current_chamber]
    
    player_name = game['players'][user_id]['name']
    game['current_chamber'] = (current_chamber + 1) % 6
    
    if is_bullet:
        # –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
        game['players'][user_id]['alive'] = False
        winner_id = [pid for pid in game['players'] if pid != user_id][0]
        winner_name = game['players'][winner_id]['name']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_manager.update_stats(winner_id, game['chat_id'], "russian_roulette", won=True)
        user_manager.update_stats(user_id, game['chat_id'], "russian_roulette", won=False)
        
        text = (
            f"üí• **–ë–ê–ë–ê–•!**\n\n"
            f"üíÄ {player_name} –±—ã–ª —É–±–∏—Ç!\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n\n"
            f"–ü–∞—Ç—Ä–æ–Ω –±—ã–ª –≤ –∫–∞–º–æ—Ä–µ {current_chamber + 1}"
        )
        
        await callback.message.edit_text(text, reply_markup=get_play_again_keyboard("russian_roulette"))
        game_manager.remove_game(game_id)
        
    else:
        # –ò–≥—Ä–æ–∫ –≤—ã–∂–∏–ª, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥
        game['players'][user_id]['turn'] = False
        next_player_id = [pid for pid in game['players'] if pid != user_id][0]
        game['players'][next_player_id]['turn'] = True
        next_player_name = game['players'][next_player_id]['name']
        
        text = (
            f"üî´ **–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞**\n\n"
            f"‚úÖ {player_name} –≤—ã–∂–∏–ª!\n"
            f"üé≤ –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: {next_player_name}\n"
            f"üìç –ü—Ä–æ–π–¥–µ–Ω–æ –∫–∞–º–æ—Ä: {game['current_chamber']}\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É..."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí• –í–´–°–¢–†–ï–õ–ò–¢–¨!", callback_data=f"rr_shoot_{game_id}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    await callback.answer()

# –ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤
async def start_dice_battle(message: types.Message, game_id: str):
    game = game_manager.get_game(game_id)
    if not game:
        return
    
    player1_id, player2_id = list(game['players'].keys())
    player1_name = game['players'][player1_id]['name']
    player2_name = game['players'][player2_id]['name']
    
    text = (
        f"üé≤ **–ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤**\n\n"
        f"üéØ –ò–≥—Ä–æ–∫–∏:\n"
        f"‚Ä¢ {player1_name} (3 –±—Ä–æ—Å–∫–∞)\n"
        f"‚Ä¢ {player2_name} (3 –±—Ä–æ—Å–∫–∞)\n\n"
        f"üé≤ –•–æ–¥: {player1_name}\n\n"
        f"–ë—Ä–æ—Å–∞–π –∫—É–±–∏–∫ –∏ –Ω–∞–±–∏—Ä–∞–π –æ—á–∫–∏!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö", callback_data=f"db_roll_{game_id}")]
    ])
    
    await message.reply(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("db_roll_"))
async def db_roll(callback: types.CallbackQuery):
    game_id = callback.data.replace("db_roll_", "")
    game = game_manager.get_game(game_id)
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    user_id = callback.from_user.id
    if user_id not in game['players']:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥—Ä—ã!", show_alert=True)
        return
    
    if user_id != game['current_player']:
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫
    dice_roll = random.randint(1, 6)
    player = game['players'][user_id]
    player['score'] += dice_roll
    player['rolls_left'] -= 1
    
    player_name = player['name']
    
    if player['rolls_left'] > 0:
        # –ï—â–µ –µ—Å—Ç—å –±—Ä–æ—Å–∫–∏
        text = (
            f"üé≤ **–ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤**\n\n"
            f"üéØ {player_name} –≤—ã–±—Ä–æ—Å–∏–ª: {dice_roll}
@dp.callback_query(F.data.startswith("db_roll_"))
async def db_roll(callback: types.CallbackQuery):
    game_id = callback.data.replace("db_roll_", "")
    game = game_manager.get_game(game_id)
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    user_id = callback.from_user.id
    if user_id not in game['players']:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥—Ä—ã!", show_alert=True)
        return
    
    if user_id != game['current_player']:
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫
    dice_roll = random.randint(1, 6)
    player = game['players'][user_id]
    player['score'] += dice_roll
    player['rolls_left'] -= 1
    
    player_name = player['name']
    player1_id, player2_id = list(game['players'].keys())
    player1 = game['players'][player1_id]
    player2 = game['players'][player2_id]
    
    if player['rolls_left'] > 0:
        # –ï—â–µ –µ—Å—Ç—å –±—Ä–æ—Å–∫–∏
        text = (
            f"üé≤ **–ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤**\n\n"
            f"üéØ {player_name} –≤—ã–±—Ä–æ—Å–∏–ª: {dice_roll}\n"
            f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {player['score']}\n"
            f"üé≤ –û—Å—Ç–∞–ª–æ—Å—å –±—Ä–æ—Å–∫–æ–≤: {player['rolls_left']}\n\n"
            f"–ë—Ä–æ—Å–∞–π —Å–Ω–æ–≤–∞!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö", callback_data=f"db_roll_{game_id}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    else:
        # –ë—Ä–æ—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥
        if game['current_player'] == player1_id:
            game['current_player'] = player2_id
            next_player_name = player2['name']
            
            text = (
                f"üé≤ **–ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤**\n\n"
                f"üéØ {player_name} –≤—ã–±—Ä–æ—Å–∏–ª: {dice_roll}\n"
                f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç {player_name}: {player['score']}\n\n"
                f"üé≤ –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫: {next_player_name}"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé≤ –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö", callback_data=f"db_roll_{game_id}")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        else:
            # –û–±–∞ –∏–≥—Ä–æ–∫–∞ –±—Ä–æ—Å–∏–ª–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if player1['score'] > player2['score']:
                winner_id, loser_id = player1_id, player2_id
            elif player2['score'] > player1['score']:
                winner_id, loser_id = player2_id, player1_id
            else:
                # –ù–∏—á—å—è
                text = (
                    f"üé≤ **–ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤ - –ù–ò–ß–¨–Ø!**\n\n"
                    f"üìä –°—á–µ—Ç:\n"
                    f"‚Ä¢ {player1['name']}: {player1['score']}\n"
                    f"‚Ä¢ {player2['name']}: {player2['score']}\n\n"
                    f"ü§ù –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–∞—é—Ç –ø–æ 1 –æ—á–∫—É!"
                )
                
                user_manager.update_stats(player1_id, game['chat_id'], "dice_battle", won=True)
                user_manager.update_stats(player2_id, game['chat_id'], "dice_battle", won=True)
                
                await callback.message.edit_text(text, reply_markup=get_play_again_keyboard("dice_battle"))
                game_manager.remove_game(game_id)
                return
            
            winner_name = game['players'][winner_id]['name']
            loser_name = game['players'][loser_id]['name']
            
            text = (
                f"üé≤ **–ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤ - –ü–û–ë–ï–î–ê!**\n\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
                f"üìä –°—á–µ—Ç:\n"
                f"‚Ä¢ {player1['name']}: {player1['score']}\n"
                f"‚Ä¢ {player2['name']}: {player2['score']}\n\n"
                f"üéØ {winner_name} –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ!"
            )
            
            user_manager.update_stats(winner_id, game['chat_id'], "dice_battle", won=True)
            user_manager.update_stats(loser_id, game['chat_id'], "dice_battle", won=False)
            
            await callback.message.edit_text(text, reply_markup=get_play_again_keyboard("dice_battle"))
            game_manager.remove_game(game_id)
    
    await callback.answer()

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
async def start_number_guess(message: types.Message, game_id: str):
    game = game_manager.get_game(game_id)
    if not game:
        return
    
    player1_id, player2_id = list(game['players'].keys())
    player1_name = game['players'][player1_id]['name']
    player2_name = game['players'][player2_id]['name']
    
    text = (
        f"üî¢ **–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ**\n\n"
        f"üéØ –ò–≥—Ä–æ–∫–∏:\n"
        f"‚Ä¢ {player1_name}\n"
        f"‚Ä¢ {player2_name}\n\n"
        f"üé≤ –ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n"
        f"üë§ –•–æ–¥: {player1_name}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:"
    )
    
    await message.reply(text)

@dp.message(F.text & F.text.regexp(r'^\d+$'))
async def handle_number_guess(message: types.Message):
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ò—â–µ–º –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" –≥–¥–µ —Ç–µ–∫—É—â–∏–π —Ö–æ–¥ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for game_id, game in game_manager.active_games.items():
        if (game['type'] == "number_guess" and 
            game['chat_id'] == chat_id and 
            game['current_player'] == user_id):
            
            try:
                guess = int(message.text)
                if guess < 1 or guess > 100:
                    await message.reply("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!")
                    return
                
                target_number = game['target_number']
                player_name = game['players'][user_id]['name']
                game['players'][user_id]['attempts'] += 1
                
                if guess == target_number:
                    # –ò–≥—Ä–æ–∫ —É–≥–∞–¥–∞–ª!
                    winner_id = user_id
                    loser_id = [pid for pid in game['players'] if pid != user_id][0]
                    winner_name = game['players'][winner_id]['name']
                    loser_name = game['players'][loser_id]['name']
                    attempts = game['players'][user_id]['attempts']
                    
                    text = (
                        f"üî¢ **–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - –ü–û–ë–ï–î–ê!**\n\n"
                        f"üéØ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {target_number}\n"
                        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
                        f"üìä –ü–æ–ø—ã—Ç–æ–∫: {attempts}\n\n"
                        f"üéØ {winner_name} —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!"
                    )
                    
                    user_manager.update_stats(winner_id, game['chat_id'], "number_guess", won=True)
                    user_manager.update_stats(loser_id, game['chat_id'], "number_guess", won=False)
                    
                    await message.reply(text, reply_markup=get_play_again_keyboard("number_guess"))
                    game_manager.remove_game(game_id)
                    
                else:
                    # –ù–µ —É–≥–∞–¥–∞–ª, –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥
                    hint = "üîª –ú–µ–Ω—å—à–µ" if guess > target_number else "üî∫ –ë–æ–ª—å—à–µ"
                    next_player_id = [pid for pid in game['players'] if pid != user_id][0]
                    game['current_player'] = next_player_id
                    next_player_name = game['players'][next_player_id]['name']
                    
                    text = (
                        f"üî¢ **–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ**\n\n"
                        f"üéØ {player_name}: {guess} {hint}\n"
                        f"üìä –ü–æ–ø—ã—Ç–æ–∫: {game['players'][user_id]['attempts']}\n\n"
                        f"üë§ –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: {next_player_name}\n\n"
                        f"–û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:"
                    )
                    
                    await message.reply(text)
                
                break
                
            except ValueError:
                await message.reply("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
            break

# –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
async def start_tic_tac_toe(message: types.Message, game_id: str):
    game = game_manager.get_game(game_id)
    if not game:
        return
    
    player1_id, player2_id = list(game['players'].keys())
    player1_name = game['players'][player1_id]['name']
    player2_name = game['players'][player2_id]['name']
    
    text = (
        f"‚≠ï **–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏**\n\n"
        f"üéØ –ò–≥—Ä–æ–∫–∏:\n"
        f"‚Ä¢ {player1_name} (‚ùå)\n"
        f"‚Ä¢ {player2_name} (‚≠ï)\n\n"
        f"üé≤ –•–æ–¥: {player1_name}\n\n"
        f"–í—ã–±–µ—Ä–∏ –∫–ª–µ—Ç–∫—É:"
    )
    
    keyboard = get_tic_tac_toe_keyboard(game_id, game['board'])
    await message.reply(text, reply_markup=keyboard)

def get_tic_tac_toe_keyboard(game_id: str, board: list):
    keyboard = []
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            cell_index = i + j
            row.append(InlineKeyboardButton(
                text=board[cell_index],
                callback_data=f"ttt_{game_id}_{cell_index}"
            ))
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(F.data.startswith("ttt_"))
async def ttt_move(callback: types.CallbackQuery):
    parts = callback.data.split('_')
    game_id = parts[1]
    cell_index = int(parts[2])
    
    game = game_manager.get_game(game_id)
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    user_id = callback.from_user.id
    if user_id not in game['players']:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥—Ä—ã!", show_alert=True)
        return
    
    if user_id != game['current_player']:
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    if game['board'][cell_index] != '‚¨ú':
        await callback.answer("‚ùå –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return
    
    # –î–µ–ª–∞–µ–º —Ö–æ–¥
    symbol = game['players'][user_id]['symbol']
    game['board'][cell_index] = symbol
    player_name = game['players'][user_id]['name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if check_tic_tac_toe_win(game['board'], symbol):
        # –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
        winner_id = user_id
        loser_id = [pid for pid in game['players'] if pid != user_id][0]
        winner_name = game['players'][winner_id]['name']
        loser_name = game['players'][loser_id]['name']
        
        text = (
            f"‚≠ï **–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ - –ü–û–ë–ï–î–ê!**\n\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name} ({symbol})\n"
            f"üíÄ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser_name}\n\n"
            f"üéØ {winner_name} –≤—ã–∏–≥—Ä–∞–ª –ø–∞—Ä—Ç–∏—é!"
        )
        
        user_manager.update_stats(winner_id, game['chat_id'], "tic_tac_toe", won=True)
        user_manager.update_stats(loser_id, game['chat_id'], "tic_tac_toe", won=False)
        
        keyboard = get_tic_tac_toe_keyboard(game_id, game['board'])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.message.reply("üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_play_again_keyboard("tic_tac_toe"))
        game_manager.remove_game(game_id)
        
    elif '‚¨ú' not in game['board']:
        # –ù–∏—á—å—è
        player1_id, player2_id = list(game['players'].keys())
        
        text = f"‚≠ï **–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ - –ù–ò–ß–¨–Ø!**\n\nü§ù –ü–∞—Ä—Ç–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é!"
        
        user_manager.update_stats(player1_id, game['chat_id'], "tic_tac_toe", won=True)
        user_manager.update_stats(player2_id, game['chat_id'], "tic_tac_toe", won=True)
        
        keyboard = get_tic_tac_toe_keyboard(game_id, game['board'])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.message.reply("üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_play_again_keyboard("tic_tac_toe"))
        game_manager.remove_game(game_id)
        
    else:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        next_player_id = [pid for pid in game['players'] if pid != user_id][0]
        game['current_player'] = next_player_id
        next_player_name = game['players'][next_player_id]['name']
        next_symbol = game['players'][next_player_id]['symbol']
        
        text = (
            f"‚≠ï **–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏**\n\n"
            f"üéØ –•–æ–¥ —Å–¥–µ–ª–∞–ª: {player_name} ({symbol})\n"
            f"üé≤ –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: {next_player_name} ({next_symbol})"
        )
        
        keyboard = get_tic_tac_toe_keyboard(game_id, game['board'])
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    await callback.answer()

def check_tic_tac_toe_win(board, symbol):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ
        [0, 4, 8], [2, 4, 6]              # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ
    ]
    
    for combo in win_combinations:
        if board[combo[0]] == symbol and board[combo[1]] == symbol and board[combo[2]] == symbol:
            return True
    return False

# –ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
async def start_quick_math(message: types.Message, game_id: str):
    game = game_manager.get_game(game_id)
    if not game:
        return
    
    player1_id, player2_id = list(game['players'].keys())
    player1_name = game['players'][player1_id]['name']
    player2_name = game['players'][player2_id]['name']
    
    text = (
        f"üßÆ **–ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞**\n\n"
        f"üéØ –ò–≥—Ä–æ–∫–∏:\n"
        f"‚Ä¢ {player1_name}\n"
        f"‚Ä¢ {player2_name}\n\n"
        f"üé≤ –•–æ–¥: {player1_name}\n\n"
        f"–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n"
        f"**{game['problem']} = ?**\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º:"
    )
    
    await message.reply(text, parse_mode='Markdown')

@dp.message(F.text & F.text.regexp(r'^-?\d+$'))
async def handle_math_answer(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É "–ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
    for game_id, game in game_manager.active_games.items():
        if (game['type'] == "quick_math" and 
            game['chat_id'] == chat_id and 
            game['current_player'] == user_id):
            
            try:
                answer = int(message.text)
                correct_answer = game['answer']
                player_name = game['players'][user_id]['name']
                
                if answer == correct_answer:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    game['players'][user_id]['score'] += 1
                    player1_id, player2_id = list(game['players'].keys())
                    player1 = game['players'][player1_id]
                    player2 = game['players'][player2_id]
                    
                    if player1['score'] >= 3 or player2['score'] >= 3:
                        # –ö—Ç–æ-—Ç–æ –¥–æ—Å—Ç–∏–≥ 3 –æ—á–∫–æ–≤
                        if player1['score'] >= 3:
                            winner_id, loser_id = player1_id, player2_id
                        else:
                            winner_id, loser_id = player2_id, player1_id
                        
                        winner_name = game['players'][winner_id]['name']
                        loser_name = game['players'][loser_id]['name']
                        
                        text = (
                            f"üßÆ **–ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –ü–û–ë–ï–î–ê!**\n\n"
                            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
                            f"üìä –°—á–µ—Ç:\n"
                            f"‚Ä¢ {player1['name']}: {player1['score']}\n"
                            f"‚Ä¢ {player2['name']}: {player2['score']}\n\n"
                            f"üéØ {winner_name} –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã!"
                        )
                        
                        user_manager.update_stats(winner_id, game['chat_id'], "quick_math", won=True)
                        user_manager.update_stats(loser_id, game['chat_id'], "quick_math", won=False)
                        
                        await message.reply(text, reply_markup=get_play_again_keyboard("quick_math"))
                        game_manager.remove_game(game_id)
                        
                    else:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
                        num1, num2 = random.randint(1, 20), random.randint(1, 20)
                        operations = ['+', '-', '*']
                        operation = random.choice(operations)
                        
                        if operation == '+':
                            new_answer = num1 + num2
                        elif operation == '-':
                            new_answer = num1 - num2
                        else:
                            new_answer = num1 * num2
                        
                        game['problem'] = f"{num1} {operation} {num2}"
                        game['answer'] = new_answer
                        
                        # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥
                        next_player_id = [pid for pid in game['players'] if pid != user_id][0]
                        game['current_player'] = next_player_id
                        next_player_name = game['players'][next_player_id]['name']
                        
                        text = (
                            f"üßÆ **–ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞**\n\n"
                            f"‚úÖ {player_name} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
                            f"üìä –°—á–µ—Ç:\n"
                            f"‚Ä¢ {player1['name']}: {player1['score']}\n"
                            f"‚Ä¢ {player2['name']}: {player2['score']}\n\n"
                            f"üé≤ –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: {next_player_name}\n\n"
                            f"–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n"
                            f"**{game['problem']} = ?**"
                        )
                        
                        await message.reply(text, parse_mode='Markdown')
                        
                else:
                    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    next_player_id = [pid for pid in game['players'] if pid != user_id][0]
                    game['current_player'] = next_player_id
                    next_player_name = game['players'][next_player_id]['name']
                    
                    text = (
                        f"üßÆ **–ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞**\n\n"
                        f"‚ùå {player_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
                        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                        f"üé≤ –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: {next_player_name}\n\n"
                        f"–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n"
                        f"**{game['problem']} = ?**"
                    )
                    
                    await message.reply(text, parse_mode='Markdown')
                
                break
                
            except ValueError:
                await message.reply("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
            break

# –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã
async def start_coin_flip(message: types.Message, game_id: str):
    game = game_manager.get_game(game_id)
    if not game:
        return
    
    player1_id, player2_id = list(game['players'].keys())
    player1_name = game['players'][player1_id]['name']
    player2_name = game['players'][player2_id]['name']
    
    text = (
        f"ü™ô **–ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã**\n\n"
        f"üéØ –ò–≥—Ä–æ–∫–∏:\n"
        f"‚Ä¢ {player1_name}\n"
        f"‚Ä¢ {player2_name}\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü¶Ö –û—Ä–µ–ª", callback_data=f"cf_choice_{game_id}_heads"),
            InlineKeyboardButton(text="üìÄ –†–µ—à–∫–∞", callback_data=f"cf_choice_{game_id}_tails")
        ]
    ])
    
    await message.reply(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("cf_choice_"))
async def cf_choice(callback: types.CallbackQuery):
    parts = callback.data.split('_')
    game_id = parts[2]
    choice = parts[3]  # heads –∏–ª–∏ tails
    
    game = game_manager.get_game(game_id)
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
        return
    
    user_id = callback.from_user.id
    if user_id not in game['players']:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥—Ä—ã!", show_alert=True)
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    game['players'][user_id]['choice'] = choice
    player_name = game['players'][user_id]['name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª–∏ –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –≤—ã–±–æ—Ä
    player1_id, player2_id = list(game['players'].keys())
    player1_choice = game['players'][player1_id]['choice']
    player2_choice = game['players'][player2_id]['choice']
    
    if player1_choice and player2_choice:
        # –û–±–∞ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä, –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É
        result = random.choice(['heads', 'tails'])
        result_emoji = 'ü¶Ö' if result == 'heads' else 'üìÄ'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if player1_choice == result:
            winner_id, loser_id = player1_id, player2_id
        else:
            winner_id, loser_id = player2_id, player1_id
        
        winner_name = game['players'][winner_id]['name']
        loser_name = game['players'][loser_id]['name']
        
        text = (
            f"ü™ô **–ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã**\n\n"
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_emoji} {'–û—Ä–µ–ª' if result == 'heads' else '–†–µ—à–∫–∞'}\n\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
            f"üíÄ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser_name}\n\n"
            f"–í—ã–±–æ—Ä—ã:\n"
            f"‚Ä¢ {game['players'][player1_id]['name']}: {'–û—Ä–µ–ª' if player1_choice == 'heads' else '–†–µ—à–∫–∞'}\n"
            f"‚Ä¢ {game['players'][player2_id]['name']}: {'–û—Ä–µ–ª' if player2_choice == 'heads' else '–†–µ—à–∫–∞'}"
        )
        
        user_manager.update_stats(winner_id, game['chat_id'], "coin_flip", won=True)
        user_manager.update_stats(loser_id, game['chat_id'], "coin_flip", won=False)
        
        await callback.message.edit_text(text, reply_markup=get_play_again_keyboard("coin_flip"))
        game_manager.remove_game(game_id)
        
    else:
        # –ñ–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        text = (
            f"ü™ô **–ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã**\n\n"
            f"‚úÖ {player_name} –≤—ã–±—Ä–∞–ª: {'–û—Ä–µ–ª' if choice == 'heads' else '–†–µ—à–∫–∞'}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞..."
        )
        
        await callback.message.edit_text(text, reply_markup=callback.message.reply_markup)
        await callback.answer(f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª {'–û—Ä–µ–ª' if choice == 'heads' else '–†–µ—à–∫–∞'}!")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_game_name(game_type: str) -> str:
    names = {
        "russian_roulette": "üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞",
        "dice_battle": "üé≤ –ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤", 
        "number_guess": "üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ",
        "tic_tac_toe": "‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏",
        "quick_math": "üßÆ –ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "coin_flip": "ü™ô –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã"
    }
    return names.get(game_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞")

def get_game_description(game_type: str) -> str:
    descriptions = {
        "russian_roulette": "–°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É. 1 –ø–∞—Ç—Ä–æ–Ω, 6 –∫–∞–º–æ—Ä. –ö—Ç–æ –≤—ã–∂–∏–≤–µ—Ç?",
        "dice_battle": "–ë—Ä–æ—Å–∞–π –∫—É–±–∏–∫–∏ –∏ –Ω–∞–±–∏—Ä–∞–π –æ—á–∫–∏. –£ –∫–æ–≥–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ?",
        "number_guess": "–£–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ. –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ - –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤!",
        "tic_tac_toe": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏. –ü—Ä–æ—è–≤–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!",
        "quick_math": "–†–µ—à–∞–π –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å. –ü–µ—Ä–≤—ã–π –¥–æ 3 –æ—á–∫–æ–≤ –ø–æ–±–µ–∂–¥–∞–µ—Ç!",
        "coin_flip": "–ü—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É. –í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã!"
    }
    return descriptions.get(game_type, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query(F.data == "my_stats")
async def my_stats(callback: types.CallbackQuery):
    user_stats = user_manager.get_user_stats(callback.from_user.id, callback.message.chat.id)
    
    if user_stats:
        username, wins, losses, points = user_stats
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º
        cursor = user_manager.conn.cursor()
        cursor.execute(
            'SELECT game_type, wins, losses FROM game_stats WHERE user_id = ? AND chat_id = ?',
            (callback.from_user.id, callback.message.chat.id)
        )
        game_stats = cursor.fetchall()
        
        text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {username}**\n\n"
        text += f"üèÜ –ü–æ–±–µ–¥: {wins}\n"
        text += f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n" 
        text += f"üéØ –û—á–∫–æ–≤: {points}\n\n"
        
        if game_stats:
            text += "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º:**\n"
            for game_type, game_wins, game_losses in game_stats:
                game_name = get_game_name(game_type)
                total = game_wins + game_losses
                win_rate = (game_wins / total * 100) if total > 0 else 0
                text += f"‚Ä¢ {game_name}: {game_wins}/{total} ({win_rate:.1f}%)\n"
        
        await callback.message.edit_text(text, reply_markup=get_main_keyboard())
    else:
        await callback.message.edit_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°—ã–≥—Ä–∞–π –≤ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É!", 
                                       reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "top_players")
async def top_players(callback: types.CallbackQuery):
    cursor = user_manager.conn.cursor()
    cursor.execute(
        'SELECT username, wins, losses, points FROM users WHERE chat_id = ? ORDER BY points DESC LIMIT 10',
        (callback.message.chat.id,)
    )
    top_users = cursor.fetchall()
    
    if top_users:
        text = "üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:**\n\n"
        for i, (username, wins, losses, points) in enumerate(top_users, 1):
            text += f"{i}. {username} - {points} –æ—á–∫–æ–≤ ({wins}üèÜ/{losses}üíÄ)\n"
    else:
        text = "üèÜ –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!\n–°—ã–≥—Ä–∞–π –≤ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É!"
    
    await callback.message.edit_text(text, reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "game_rules")
async def game_rules(callback: types.CallbackQuery):
    text = (
        "üìñ **–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä:**\n\n"
        "üî´ **–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞:**\n"
        "‚Ä¢ 1 –ø–∞—Ç—Ä–æ–Ω –≤ 6-–∑–∞—Ä—è–¥–Ω–æ–º —Ä–µ–≤–æ–ª—å–≤–µ—Ä–µ\n"
        "‚Ä¢ –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–µ–ª—è—é—Ç –≤ —Å–µ–±—è\n"
        "‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –≤ –∫–æ–≥–æ –ø–æ–ø–∞–¥–µ—Ç –ø–∞—Ç—Ä–æ–Ω\n\n"
        
        "üé≤ **–ë–∏—Ç–≤–∞ –∫—É–±–∏–∫–æ–≤:**\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ 3 —Ä–∞–∑–∞\n"
        "‚Ä¢ –°—É–º–º–∏—Ä—É—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤\n"
        "‚Ä¢ –ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ —Å –±–æ–ª—å—à–µ–π —Å—É–º–º–æ–π\n\n"
        
        "üî¢ **–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ:**\n"
        "‚Ä¢ –ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n"
        "‚Ä¢ –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–∑—ã–≤–∞—é—Ç —á–∏—Å–ª–∞\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—é—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ '–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ'\n"
        "‚Ä¢ –ü–æ–±–µ–∂–¥–∞–µ—Ç —É–≥–∞–¥–∞–≤—à–∏–π —á–∏—Å–ª–æ\n\n"
        
        "‚≠ï **–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:**\n"
        "‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ 3x3\n"
        "‚Ä¢ –°–æ–±–∏—Ä–∞–π 3 –≤ —Ä—è–¥ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏\n\n"
        
        "üßÆ **–ë—ã—Å—Ç—Ä–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞:**\n"
        "‚Ä¢ –†–µ—à–∞–π –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n"
        "‚Ä¢ –ü–µ—Ä–≤—ã–π –¥–æ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–±–µ–∂–¥–∞–µ—Ç\n\n"
        
        "ü™ô **–ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã:**\n"
        "‚Ä¢ –ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞\n"
        "‚Ä¢ –ü–æ–±–µ–∂–¥–∞–µ—Ç —É–≥–∞–¥–∞–≤—à–∏–π —Å—Ç–æ—Ä–æ–Ω—É"
    )
    
    await callback.message.edit_text(text, reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ GameBot starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())